name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip

      - name: Setup Vendor Files
        run: |
          # Debug: Show current symlinks
          echo "Current symlink targets:"
          readlink kernel/sched_assist || echo "Not a symlink"
          readlink kernel/locking/klockopt || echo "Not a symlink"
          
          # Create vendor directory structure
          sudo mkdir -p vendor/oplus/kernel/oplus_performance/sched_assist
          sudo mkdir -p vendor/oplus/kernel/oplus_performance/locking/klockopt
          
          # Create Kconfig files in vendor directory
          sudo tee vendor/oplus/kernel/oplus_performance/sched_assist/Kconfig > /dev/null << 'EOL'
          config OPLUS_FEATURE_SCHED_ASSIST
            bool "Sched assist optimize"
            default n
            help
              Scheduler assist features
          EOL
          
          sudo tee vendor/oplus/kernel/oplus_performance/locking/klockopt/Kconfig > /dev/null << 'EOL'
          config OPLUS_FEATURE_KLOCKOPT
            bool "Kernel lock optimization"
            default n
            help
              Kernel lock optimization features
          EOL
          
          # Set permissions
          sudo chown -R $USER:$USER vendor
          
          # Debug: Show created files
          echo -e "\nCreated Kconfig files:"
          ls -la vendor/oplus/kernel/oplus_performance/sched_assist/
          ls -la vendor/oplus/kernel/oplus_performance/locking/klockopt/

      - name: Configure Build
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Debug: Show available configs
          echo "Available ARM64 configs:"
          ls -la arch/arm64/configs/
          
          # Create minimal defconfig first
          cat > arch/arm64/configs/minimal_defconfig << 'EOL'
          CONFIG_ARM64=y
          CONFIG_CROSS_COMPILE="aarch64-linux-gnu-"
          # Disable problematic features
          # CONFIG_OPLUS_FEATURE_SCHED_ASSIST is not set
          # CONFIG_OPLUS_FEATURE_KLOCKOPT is not set
          EOL
          
          # Try minimal config first
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE minimal_defconfig
          
          # Show config
          echo -e "\nConfiguration summary:"
          head -n 50 out/.config

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Build with detailed output
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) V=1 2>&1 | tee build.log
          
          BUILD_STATUS=${PIPESTATUS[0]}
          if [ $BUILD_STATUS -eq 0 ]; then
            echo "Build completed successfully!"
          else
            echo "Build failed with status $BUILD_STATUS"
            echo "Last 50 lines of build log:"
            tail -n 50 build.log
            # Show any Kconfig related errors
            grep -i "kconfig" build.log
            exit $BUILD_STATUS
          fi

      - name: Upload Build Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-outputs
          path: |
            out/.config
            build.log
            arch/arm64/configs/minimal_defconfig
          if-no-files-found: warn
