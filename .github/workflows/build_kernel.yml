name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip

      - name: Setup Required Files
        run: |
          # Create required directories
          mkdir -p kernel/sched_assist
          mkdir -p kernel/locking/klockopt
          
          # Create sched_assist Kconfig
          cat << 'EOL' > kernel/sched_assist/Kconfig
          config OPLUS_FEATURE_SCHED_ASSIST
            tristate "sched_assist"
            default n
            help
              turning sched for ui, render and so on to improve UX
          
          config OPLUS_FEATURE_SCHED_SPREAD
            bool "sched_spread"
            default n
            help
              This is the uifirst 5.0 feature, which will spread tasks,
              kick runnable time from task demand and adjust bg's time slice.
          
          config OPLUS_FEATURE_AUDIO_OPT
            bool "config audio opt"
            default n
            help
              audio task schedule opt
          
          config MMAP_LOCK_OPT
            bool "config mmap lock opt"
            default n
            depends on OPLUS_FEATURE_SCHED_ASSIST
            help
              reduce sleep time in mmap lock
          
          config OPLUS_ALLBOOST_OPT
            bool "config allboost opt"
            default n
            help
              Make the SCHED_ALL_BOOST function take effect
          
          config OPLUS_FG_BOOST
            bool "config oplus fg boost"
            default n
            help
              Make the SCHED_FG_BOOST function take effect
          EOL
          
          # Create klockopt Kconfig
          cat << 'EOL' > kernel/locking/klockopt/Kconfig
          config KERNEL_LOCK_OPT
            tristate "config kernel lock opt"
            default n
            help
              uxmutex inplement & record rwsem owners
          EOL
          
          # Create dummy source files (if needed)
          touch kernel/sched_assist/sched_assist.c
          touch kernel/locking/klockopt/klockopt.c
          
          # Verify files were created
          echo "Verifying created files:"
          ls -lR kernel/sched_assist/
          ls -lR kernel/locking/klockopt/
          
          echo "Contents of Kconfig files:"
          echo -e "\nkernel/sched_assist/Kconfig:"
          cat kernel/sched_assist/Kconfig
          echo -e "\nkernel/locking/klockopt/Kconfig:"
          cat kernel/locking/klockopt/Kconfig

      - name: Configure and Build
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Show current directory structure
          echo "Current directory structure:"
          pwd
          ls -la
          
          # Configure with debug config
          echo "Configuring kernel..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          
          # Build kernel
          echo "Building kernel..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) 2>&1 | tee build.log

      - name: Collect Artifacts
        if: always()
        run: |
          mkdir -p artifacts
          
          # Copy kernel files if they exist
          cp out/arch/arm64/boot/Image* artifacts/ 2>/dev/null || echo "No kernel image found"
          
          # Copy configs
          cp out/.config artifacts/kernel_config 2>/dev/null || echo "No .config found"
          cp kernel/sched_assist/Kconfig artifacts/sched_assist_kconfig.txt || echo "No sched_assist Kconfig"
          cp kernel/locking/klockopt/Kconfig artifacts/klockopt_kconfig.txt || echo "No klockopt Kconfig"
          
          # Copy logs
          cp build.log artifacts/ 2>/dev/null || echo "No build log found"
          
          echo "Artifacts collected:"
          ls -lR artifacts/

      - name: Upload Build Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-outputs
          path: artifacts/
          if-no-files-found: warn
