name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip \
          libncurses-dev gzip python-is-python3

      - name: Create Required Files
        run: |
          # Create rootguard directory and Makefile
          mkdir -p arch/arm64/kernel/rootguard
          
          # Create a basic Makefile for rootguard
          cat << 'EOL' > arch/arm64/kernel/rootguard/Makefile
          # Basic Makefile for rootguard
          obj-$(CONFIG_OPLUS_ROOT_CHECK) += rootguard.o
          ccflags-y += -Werror
          EOL
          
          # Create a dummy rootguard.c if it doesn't exist
          if [ ! -f "arch/arm64/kernel/rootguard/rootguard.c" ]; then
            cat << 'EOL' > arch/arm64/kernel/rootguard/rootguard.c
          #include <linux/init.h>
          #include <linux/module.h>
          
          static int __init rootguard_init(void)
          {
              return 0;
          }
          
          static void __exit rootguard_exit(void)
          {
          }
          
          module_init(rootguard_init);
          module_exit(rootguard_exit);
          MODULE_LICENSE("GPL");
          EOL
          fi

      - name: Setup OPLUS Config
        run: |
          cat << 'EOL' > OplusKernelEnvConfig.mk
          # OPLUS Features Configuration
          OPLUS_FEATURE_HEALTHINFO=yes
          OPLUS_FEATURE_SCHED_ASSIST=yes
          OPLUS_FEATURE_TASK_CPUSTATS=yes
          OPLUS_FEATURE_HANS_FREEZE=yes
          OPLUS_FEATURE_STORAGE_TOOL=yes
          OPLUS_FEATURE_MMC_DRIVER=yes
          OPLUS_FEATURE_UFS_DRIVER=yes
          OPLUS_FEATURE_UFS_SHOW_LATENCY=yes
          OPLUS_FEATURE_AOD=yes
          OPLUS_FEATURE_DC=yes
          OPLUS_FEATURE_ENABLE_MODEM_DB=yes
          OPLUS_FEATURE_ENGINEERTOOLS=yes
          OPLUS_FEATURE_THEIA=yes
          OPLUS_FEATURE_APP_MONITOR=yes
          OPLUS_FEATURE_MULTI_KSWAPD=yes
          OPLUS_FEATURE_PHOENIX=yes
          OPLUS_FEATURE_SENSOR=yes
          OPLUS_FEATURE_IOMONITOR=yes
          OPLUS_FEATURE_MEMLEAK_DETECT=yes
          OPLUS_FEATURE_WIFI_MTUDETECT=yes
          OPLUS_FEATURE_WIFI_SLA=yes
          OPLUS_FEATURE_CHG_BASIC=yes

          # Export features
          $(foreach myfeature,$(shell grep OPLUS_FEATURE_ $(CURDIR)/OplusKernelEnvConfig.mk | grep -v "#" | cut -d'=' -f1), \
          $(eval $(myfeature)_MACRO := -D$(myfeature)) \
          $(eval KBUILD_CFLAGS += $($(myfeature)_MACRO)))
          
          export KBUILD_CFLAGS
          EOL

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Copy OplusKernelEnvConfig.mk to Makefile.oplus
          cp OplusKernelEnvConfig.mk Makefile.oplus
          echo "include Makefile.oplus" >> Makefile
          
          echo "Cleaning build directory..."
          if [ -d "out" ]; then
            rm -rf out
          fi
          
          echo "Creating out directory..."
          mkdir -p out
          
          echo "Configuring kernel..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          
          # Enable OPLUS features in config
          echo "Enabling OPLUS features..."
          while IFS= read -r line; do
            if [[ $line =~ ^OPLUS_FEATURE_ && ! $line =~ ^# ]]; then
              feature=$(echo "$line" | cut -d'=' -f1)
              echo "CONFIG_${feature}=y" >> out/.config
            fi
          done < OplusKernelEnvConfig.mk
          
          echo "Updating kernel config..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE olddefconfig
          
          echo "Building kernel..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) 2>&1 | tee build.log

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-files
          path: |
            out/arch/arm64/boot/Image*
            build.log
            OplusKernelEnvConfig.mk
            out/.config
            arch/arm64/kernel/rootguard/*
          if-no-files-found: warn
