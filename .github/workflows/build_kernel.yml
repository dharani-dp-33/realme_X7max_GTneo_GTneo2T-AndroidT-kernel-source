name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Build with detailed output
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) 2>&1 | tee build.log
          
          BUILD_STATUS=${PIPESTATUS[0]}
          if [ $BUILD_STATUS -eq 0 ]; then
            echo "Build completed successfully!"
          else
            echo "Build failed with status $BUILD_STATUS"
            exit $BUILD_STATUS
          fi

      - name: Collect Artifacts
        if: success()
        run: |
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy kernel image
          echo "Copying kernel image..."
          cp out/arch/arm64/boot/Image.gz artifacts/ || echo "No Image.gz found"
          cp out/arch/arm64/boot/Image artifacts/ || echo "No Image found"
          
          # Copy DTB files
          echo "Copying DTB files..."
          cp out/arch/arm64/boot/dts/mediatek/*.dtb artifacts/ || echo "No DTB files found"
          
          # Copy build config
          echo "Copying build config..."
          cp out/.config artifacts/kernel_config || echo "No .config found"
          
          # Copy build log
          echo "Copying build log..."
          cp build.log artifacts/ || echo "No build.log found"
          
          # Create a simple info file
          echo "Creating build info..."
          {
            echo "Build Date: $(date)"
            echo "Commit: $(git rev-parse HEAD)"
            echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
          } > artifacts/build_info.txt
          
          # List collected artifacts
          echo -e "\nCollected artifacts:"
          ls -lh artifacts/

      - name: Create Kernel Package
        if: success()
        run: |
          cd artifacts
          zip -r ../kernel_package.zip *
          cd ..
          echo -e "\nKernel package contents:"
          unzip -l kernel_package.zip

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-artifacts
          path: |
            artifacts/
            kernel_package.zip
          if-no-files-found: error

      - name: Upload Build Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build.log
          if-no-files-found: warn

      - name: Check Artifacts
        run: |
          echo "Checking artifact locations..."
          echo "1. Checking out/ directory:"
          ls -R out/arch/arm64/boot/
          
          echo -e "\n2. Checking artifacts/ directory:"
          ls -R artifacts/
          
          echo -e "\n3. Checking kernel_package.zip:"
          ls -lh kernel_package.zip || echo "No kernel_package.zip found"
