name: Build Kernel Module
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kernel
        uses: actions/checkout@v4
        with:
          repository: dharani-dp-33/realme_X7max_GTneo_GTneo2T-AndroidT-kernel-source
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential libssl-dev make bc bison flex libelf-dev zip

      - name: Check Directory Structure
        run: |
          echo "Checking directory structure..."
          ls -la kernel/
          echo "Content of sched_assist directory:"
          ls -la kernel/sched_assist/ || echo "Directory empty or inaccessible"
          echo "Available defconfigs:"
          ls -la arch/arm64/configs/

      - name: Update Kconfig
        run: |
          if [ ! -f kernel/sched_assist/Kconfig ]; then
            echo "# Scheduler Assist Configuration" > kernel/sched_assist/Kconfig
            echo "config SCHED_ASSIST" >> kernel/sched_assist/Kconfig
            echo "  bool \"Scheduler Assist\"" >> kernel/sched_assist/Kconfig
            echo "  default n" >> kernel/sched_assist/Kconfig
          fi

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # First, let's check what defconfigs are available
          echo "Available defconfigs:"
          ls arch/arm64/configs/
          
          # Try to use the correct defconfig
          export DEFCONFIG=$(ls arch/arm64/configs/ | grep -i "oppo\|mediatek" | head -n 1)
          echo "Using defconfig: ${DEFCONFIG}"
          
          # Enable module loading
          echo "CONFIG_MODULES=y" >> arch/arm64/configs/${DEFCONFIG}
          echo "CONFIG_MODULE_UNLOAD=y" >> arch/arm64/configs/${DEFCONFIG}
          echo "CONFIG_MODULE_FORCE_UNLOAD=y" >> arch/arm64/configs/${DEFCONFIG}
          echo "CONFIG_MODULE_FORCE_LOAD=y" >> arch/arm64/configs/${DEFCONFIG}
          echo "CONFIG_MODVERSIONS=y" >> arch/arm64/configs/${DEFCONFIG}
          
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE $DEFCONFIG
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc)

      - name: Package Kernel Module
        run: |
          mkdir -p release
          cp out/arch/arm64/boot/Image.gz release/ || true
          find out -name "*.ko" -exec cp {} release/ \; || true
          cd release && zip -r ../kernel-module.zip *

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-module
          path: kernel-module.zip
