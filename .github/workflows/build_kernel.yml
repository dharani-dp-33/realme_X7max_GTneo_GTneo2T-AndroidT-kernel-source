name: Build Kernel Module
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kernel
        uses: actions/checkout@v4
        with:
          repository: dharani-dp-33/realme_X7max_GTneo_GTneo2T-AndroidT-kernel-source
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential libssl-dev make bc bison flex libelf-dev zip

      - name: Create Missing Kconfig Files
        run: |
          # Create directories
          mkdir -p kernel/sched_assist
          mkdir -p kernel/locking/klockopt
          
          # Create sched_assist Kconfig
          cat << EOF > kernel/sched_assist/Kconfig
          config SCHED_ASSIST
            bool "Scheduler Assist"
            default n
            help
              Enable scheduler assist features
          EOF
          
          # Create klockopt Kconfig
          cat << EOF > kernel/locking/klockopt/Kconfig
          config KLOCKOPT
            bool "Kernel Lock Optimization"
            default n
            help
              Enable kernel lock optimization features
          EOF
          
          # Verify files were created
          echo "Verifying created files:"
          ls -la kernel/sched_assist/Kconfig
          ls -la kernel/locking/klockopt/Kconfig
          
          # Make sure files are readable
          chmod 644 kernel/sched_assist/Kconfig
          chmod 644 kernel/locking/klockopt/Kconfig

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Find available defconfigs
          echo "Available defconfigs:"
          ls -la arch/arm64/configs/
          
          # Use the original defconfig
          echo "Using k6891v1_64_k419_debug_defconfig..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          
          # Start the build
          echo "Starting kernel build..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) || {
            echo "Build failed. Checking logs..."
            if [ -f "out/error.log" ]; then
              tail -n 50 out/error.log
            fi
            exit 1
          }

      - name: Check Build Output
        if: always()
        run: |
          echo "Checking build output..."
          if [ -d "out/arch/arm64/boot" ]; then
            ls -la out/arch/arm64/boot/
          else
            echo "Boot directory not found"
          fi
          
          echo "Checking for kernel modules..."
          find out/ -name "*.ko" || echo "No kernel modules found"

      - name: Package Output
        if: success()
        run: |
          mkdir -p release
          # Copy kernel images if they exist
          cp out/arch/arm64/boot/Image.gz release/ 2>/dev/null || echo "No Image.gz found"
          cp out/arch/arm64/boot/Image release/ 2>/dev/null || echo "No Image found"
          
          # Copy kernel modules if they exist
          find out/ -name "*.ko" -exec cp {} release/ \; || echo "No kernel modules found"
          
          # Create zip if we have files
          if [ "$(ls -A release/)" ]; then
            cd release && zip -r ../kernel-module.zip *
          else
            echo "No files to package"
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-output
          path: |
            release/
            kernel-module.zip
            out/arch/arm64/boot/
          if-no-files-found: warn

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            out/.config
            out/error.log
            kernel/sched_assist/Kconfig
            kernel/locking/klockopt/Kconfig
          if-no-files-found: warn
