name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip
      
      - name: Prepare Kernel Build
        run: |
          # Debug: List current files
          echo "Current directory contents:"
          ls -la
          
          # Debug: Show kernel directory structure
          echo -e "\nKernel directory contents:"
          ls -la kernel/
          
          # Debug: Show .config and Kconfig files
          echo -e "\nConfig files in root:"
          find . -maxdepth 1 -name "*config*"
          
          # Set build environment
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # List available configs
          echo -e "\nAvailable defconfigs:"
          ls -la arch/arm64/configs/
          
          # Debug: Show complete config list
          echo -e "\nAll config files in repo:"
          find . -name "*config*"

      - name: Configure Build
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Create minimal config first
          cat > .config << 'EOL'
          # Minimal config
          CONFIG_ARM64=y
          CONFIG_CROSS_COMPILE="aarch64-linux-gnu-"
          # Basic scheduling
          CONFIG_SCHED_WALT=y
          CONFIG_FAIR_GROUP_SCHED=y
          CONFIG_SCHED_DEBUG=y
          EOL
          
          # Make defconfig
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          
          # Debug: Show final config
          echo -e "\nFinal .config contents:"
          head -n 50 out/.config

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Build with verbose output
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) V=1 2>&1 | tee build.log
          
          # Check build status
          if [ "${PIPESTATUS[0]}" -eq 0 ]; then
            echo "Build completed successfully!"
          else
            echo "Build failed! Last 50 lines of build log:"
            tail -n 50 build.log
            exit 1
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-files
          path: |
            out/
            build.log
            .config
            out/.config
          if-no-files-found: warn
