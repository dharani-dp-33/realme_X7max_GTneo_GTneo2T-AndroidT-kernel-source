name: Build Kernel Module
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kernel
        uses: actions/checkout@v4
        with:
          repository: dharani-dp-33/realme_X7max_GTneo_GTneo2T-AndroidT-kernel-source
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential libssl-dev make bc bison flex libelf-dev zip

      - name: Modify Kconfig Dependencies
        run: |
          echo "Checking init/Kconfig content..."
          grep -n "sched_assist" init/Kconfig || echo "No direct reference found"
          
          echo "Creating backup of init/Kconfig..."
          cp init/Kconfig init/Kconfig.backup
          
          echo "Modifying init/Kconfig..."
          sed -i '/kernel\/sched_assist\/Kconfig/d' init/Kconfig
          
          echo "Verifying changes..."
          diff init/Kconfig.backup init/Kconfig || true

      - name: Prepare Build Configuration
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          echo "Available defconfigs:"
          ls -la arch/arm64/configs/
          
          echo "Creating minimal defconfig..."
          cat << EOF > arch/arm64/configs/minimal_defconfig
          CONFIG_ARM64=y
          CONFIG_CROSS_COMPILE="aarch64-linux-gnu-"
          CONFIG_LOCALVERSION=""
          CONFIG_DEFAULT_HOSTNAME="android"
          CONFIG_SYSVIPC=y
          CONFIG_POSIX_MQUEUE=y
          CONFIG_FHANDLE=y
          CONFIG_AUDIT=y
          CONFIG_NO_HZ=y
          CONFIG_HIGH_RES_TIMERS=y
          CONFIG_PREEMPT=y
          CONFIG_MODULES=y
          CONFIG_MODULE_UNLOAD=y
          EOF

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          echo "Starting build with minimal config..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE minimal_defconfig
          
          echo "Building kernel..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) || {
            echo "Build failed. Checking error log..."
            if [ -f "out/error.log" ]; then
              tail -n 50 out/error.log
            fi
            exit 1
          }

      - name: Check Build Output
        if: always()
        run: |
          echo "Checking build artifacts..."
          if [ -d "out/arch/arm64/boot" ]; then
            ls -la out/arch/arm64/boot/
          else
            echo "Boot directory not found"
          fi

      - name: Create Release Package
        if: success()
        run: |
          mkdir -p release
          if [ -f "out/arch/arm64/boot/Image.gz" ]; then
            cp out/arch/arm64/boot/Image.gz release/
          fi
          if [ -f "out/arch/arm64/boot/Image" ]; then
            cp out/arch/arm64/boot/Image release/
          fi
          find out/ -name "*.ko" -exec cp {} release/ \;
          
          if [ "$(ls -A release/)" ]; then
            cd release && zip -r ../kernel-module.zip *
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: |
            release/
            kernel-module.zip
            out/arch/arm64/boot/
          if-no-files-found: warn

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            out/.config
            out/error.log
            init/Kconfig
            init/Kconfig.backup
          if-no-files-found: warn
