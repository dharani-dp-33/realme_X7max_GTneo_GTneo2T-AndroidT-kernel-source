name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip \
          libncurses-dev gzip python-is-python3

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Clean build directory
          make clean && make mrproper
          
          # Configure kernel
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          
          # Build kernel with all modules
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) 2>&1 | tee build.log

      - name: Create Flashable Package
        if: success()
        run: |
          # Create package directory structure
          mkdir -p AnyKernel3
          cd AnyKernel3
          
          # Download AnyKernel3
          git clone https://github.com/osm0sis/AnyKernel3.git .
          
          # Copy kernel image
          cp ../out/arch/arm64/boot/Image.gz kernel/
          cp ../out/arch/arm64/boot/dtb.img dtb
          cp ../out/arch/arm64/boot/dtbo.img dtbo.img 2>/dev/null || echo "No dtbo.img found"
          
          # Update AnyKernel3 config
          cat << 'EOL' > anykernel.sh
          # AnyKernel3 Ramdisk Mod Script
          # osm0sis @ xda-developers
          
          ## AnyKernel setup
          # begin properties
          properties() { '
          kernel.string=Realme X7 Max Kernel
          do.devicecheck=1
          do.modules=0
          do.systemless=1
          do.cleanup=1
          do.cleanuponabort=0
          device.name1=RMX3031
          device.name2=
          device.name3=
          device.name4=
          device.name5=
          supported.versions=
          supported.patchlevels=
          '; }
          # end properties
          
          # shell variables
          block=/dev/block/bootdevice/by-name/boot;
          is_slot_device=auto;
          ramdisk_compression=auto;
          
          ## AnyKernel methods (DO NOT CHANGE)
          . tools/ak3-core.sh;
          
          ## AnyKernel install
          split_boot;
          
          flash_boot;
          ## end install
          EOL
          
          # Create flashable zip
          zip -r9 ../kernel_flashable.zip * -x .git README.md *placeholder
          
          cd ..
          echo "Created flashable package:"
          ls -lh kernel_flashable.zip

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-files
          path: |
            out/arch/arm64/boot/Image*
            out/arch/arm64/boot/dtb*
            build.log
          if-no-files-found: warn

      - name: Upload Flashable Package
        uses: actions/upload-artifact@v4
        with:
          name: kernel-flashable
          path: kernel_flashable.zip
          if-no-files-found: warn

      - name: Build Summary
        run: |
          echo "=== Build Complete ==="
          echo "Generated files:"
          ls -lh out/arch/arm64/boot/
          echo -e "\nFlashable package:"
          ls -lh kernel_flashable.zip || echo "No flashable package created"
