name: Build Kernel Module
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kernel
        uses: actions/checkout@v4
        with:
          repository: dharani-dp-33/realme_X7max_GTneo_GTneo2T-AndroidT-kernel-source
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential libssl-dev make bc bison flex libelf-dev zip

      - name: Update Kconfig Files
        run: |
          # Just update the Kconfig files without creating directories
          echo "Updating Kconfig files..."
          
          # Update sched_assist Kconfig
          echo "config SCHED_ASSIST
            bool \"Scheduler Assist\"
            default n
            help
              Enable scheduler assist features" > kernel/sched_assist/Kconfig
          
          # Update klockopt Kconfig
          echo "config KLOCKOPT
            bool \"Kernel Lock Optimization\"
            default n
            help
              Enable kernel lock optimization features" > kernel/locking/klockopt/Kconfig
          
          # Set permissions
          chmod 644 kernel/sched_assist/Kconfig
          chmod 644 kernel/locking/klockopt/Kconfig
          
          echo "Kconfig files updated successfully"

      - name: Prepare Build
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          echo "Cleaning any previous build artifacts..."
          make mrproper
          
          echo "Available defconfigs:"
          ls -la arch/arm64/configs/

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          echo "Starting kernel build..."
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc)

      - name: Package Build
        if: success()
        run: |
          mkdir -p release
          [ -f out/arch/arm64/boot/Image.gz ] && cp out/arch/arm64/boot/Image.gz release/
          [ -f out/arch/arm64/boot/Image ] && cp out/arch/arm64/boot/Image release/
          find out/ -name "*.ko" -exec cp {} release/ \; || true
          
          if [ "$(ls -A release/)" ]; then
            cd release && zip -r ../kernel-module.zip *
          fi

      - name: Upload Build Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: |
            release/
            kernel-module.zip
            out/arch/arm64/boot/
          if-no-files-found: warn
