name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip \
          libncurses-dev gzip python-is-python3

      - name: Setup Required Paths
        run: |
          # First check what exists
          echo "=== Current Directory Structure ==="
          ls -R

          # Create only the essential parent directories
          mkdir -p vendor/oplus/kernel/include
          mkdir -p vendor/oplus/kernel/secureguard/rootguard

          # Update version header
          cat > vendor/oplus/kernel/include/oplus_version.h << 'EOF'
          #ifndef _OPLUS_VERSION_H_
          #define _OPLUS_VERSION_H_
          #define OPLUS_BUILD_DATE "2025-03-23"
          #define OPLUS_BUILD_TIME "17:38:36"
          #define OPLUS_BUILD_USER "dharani-dp-33"
          #endif
          EOF

          # Update rootguard files
          cat > vendor/oplus/kernel/secureguard/rootguard/Makefile << 'EOF'
          obj-y := rootguard.o
          EOF

          cat > vendor/oplus/kernel/secureguard/rootguard/rootguard.c << 'EOF'
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/kernel.h>
          #include "../../include/oplus_version.h"

          static int __init rootguard_init(void) { return 0; }
          static void __exit rootguard_exit(void) { }

          module_init(rootguard_init);
          module_exit(rootguard_exit);
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("OPLUS Rootguard Module");
          EOF

          # Create main OPLUS Makefiles
          echo 'obj-y += kernel/' > vendor/oplus/Makefile
          echo 'obj-y += secureguard/' > vendor/oplus/kernel/Makefile

          # Show final structure
          echo "=== Final Directory Structure ==="
          ls -R vendor/oplus

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          rm -rf out/
          mkdir -p out/
          
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) 2>&1 | tee build.log

      - name: Package Kernel
        if: success()
        run: |
          git clone https://github.com/osm0sis/AnyKernel3
          cd AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=1/g' anykernel.sh
          sed -i 's/device.name1=/device.name1=RMX3031/g' anykernel.sh
          sed -i 's/device.name2=/device.name2=RMX3033/g' anykernel.sh
          sed -i 's/device.name3=/device.name3=GTNeo/g' anykernel.sh
          sed -i 's/device.name4=/device.name4=GTNeo2T/g' anykernel.sh
          sed -i 's/device.name5=/device.name5=X7Max/g' anykernel.sh
          
          if [ -f "../out/arch/arm64/boot/Image.gz-dtb" ]; then
            cp ../out/arch/arm64/boot/Image.gz-dtb .
            zip -r9 ../X7Max-Kernel.zip * -x .git README.md *placeholder
          fi
          cd ..

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-files
          path: |
            out/arch/arm64/boot/Image*
            build.log
            X7Max-Kernel.zip
            out/.config
          if-no-files-found: warn
