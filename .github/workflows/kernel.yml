name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc build-essential \
          libssl-dev make bc bison flex libelf-dev zip \
          libncurses-dev gzip python-is-python3

      - name: Verify Repository Structure
        run: |
          echo "=== Repository Check ==="
          echo "Date: 2025-03-23 19:34:14"
          echo "User: dharani-dp-33"
          
          # Check repository structure
          ls -la
          if [ -f "Kconfig" ]; then
            echo "Found root Kconfig"
          fi
          if [ -f "init/Kconfig" ]; then
            echo "Found init/Kconfig"
            grep -n "kernel/sched_assist/Kconfig" init/Kconfig || echo "No sched_assist reference in init/Kconfig"
          fi

      - name: Create Required Kconfig
        run: |
          # Create required directories and files
          mkdir -p kernel/sched_assist
          cat > kernel/sched_assist/Kconfig << 'EOF'
          config OPLUS_FEATURE_SCHED_ASSIST
              bool "OPLUS sched assist"
              default y
              help
                  OPLUS sched assist
          EOF
          
          # Create minimally required structure
          mkdir -p include/config
          touch include/config/auto.conf

      - name: Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export KBUILD_BUILD_USER=dharani-dp-33
          export KBUILD_BUILD_HOST="github-actions"
          
          # Clean build directory
          rm -rf out/
          mkdir -p out/
          
          # Build with verbose output
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE k6891v1_64_k419_debug_defconfig
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE -j$(nproc) V=1 2>&1 | tee build.log

      - name: Check Build Output
        run: |
          if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "Build successful!"
            ls -lh out/arch/arm64/boot/Image.gz-dtb
          else
            echo "Build failed - checking error logs..."
            tail -n 50 build.log
            exit 1
          fi

      - name: Upload Kernel
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image-$(date +%s)
          path: |
            out/arch/arm64/boot/Image.gz-dtb
            build.log
            out/.config
          if-no-files-found: error
