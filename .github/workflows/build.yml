name: Realme X7 Max Kernel Builder
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ========== ERROR-PROOF SETUP ==========
      # 1. Checkout kernel source (with validation)
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: dharani-dp-33/realme_X7max_GTneo_GTneo2T-AndroidT-kernel-source
          ref: master
          path: kernel
        timeout-minutes: 3  # Fail fast if repo is inaccessible

      # 2. Validate repository structure
      - name: Verify Kernel Structure
        run: |
          if [ ! -d "kernel/arch" ]; then
            echo "::error::Kernel source structure is invalid! Missing 'arch' directory."
            exit 1
          fi

      # ========== DEPENDENCIES ==========
      # 3. Install dependencies with version pinning
      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential=12.9ubuntu3 \
            libncurses-dev=6.3-2 \
            bison=2:3.8.2+dfsg-1 \
            flex=2.6.4-8 \
            libssl-dev=3.0.2-0ubuntu1.10 \
            findutils=4.8.0-1ubuntu3

      # ========== TOOLCHAIN ==========
      # 4. Use versioned AOSP Clang (stable)
      - name: Setup Toolchain
        run: |
          git clone --depth=1 \
            -b android13-release \
            https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 \
            toolchain
        timeout-minutes: 5  # Prevent infinite hangs

      # ========== DEFCONFIG ==========
      # 5. Defconfig detection with fallbacks
      - name: Find Defconfig
        id: defconfig
        run: |
          cd kernel
          # Priority 1: Device-specific
          DEFCONFIG=$(find . -path '*x7max*defconfig' -print -quit)
          
          # Priority 2: Chipset (Dimensity 1200)
          [ -z "$DEFCONFIG" ] && DEFCONFIG=$(find . -path '*mt6893*defconfig' -print -quit)
          
          # Priority 3: First defconfig found
          [ -z "$DEFCONFIG" ] && DEFCONFIG=$(find . -name '*_defconfig' -print -quit)
          
          if [ -z "$DEFCONFIG" ]; then
            echo "::error::No defconfig found. Check kernel source structure."
            exit 1
          fi
          
          echo "DEFCONFIG_PATH=${DEFCONFIG}" >> $GITHUB_ENV
          echo "Using defconfig: ${DEFCONFIG}"

      # ========== BUILD ==========
      # 6. Safe build process
      - name: Build Kernel
        run: |
          cd kernel
          export ARCH=arm64
          export CLANG_PATH=$(realpath ../toolchain/clang-*/bin/clang)
          
          # Validate toolchain
          if [ ! -f "$CLANG_PATH" ]; then
            echo "::error::Clang not found at ${CLANG_PATH}"
            exit 1
          fi
          
          # Clean environment
          make clean && make mrproper
          
          # Build with error handling
          set -e  # Exit immediately on error
          make $DEFCONFIG_PATH
          make -j$(nproc) CC=clang 2>&1 | tee build.log
        shell: bash {0}

      # ========== ARTIFACTS ==========
      # 7. Universal artifact upload
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: |
            kernel/arch/arm64/boot/*
            kernel/out/arch/arm64/boot/*
            kernel/build.log
          if-no-files-found: error  # Fail if no artifacts

      # ========== POST-CHECKS ==========
      # 8. Final validation
      - name: Verify Artifacts
        run: |
          if [ ! -f "kernel/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "::error::Kernel image not generated!"
            exit 1
          fi
