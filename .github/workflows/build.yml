name: Realme X7 Max Kernel Builder
on:
  workflow_dispatch:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ========================
      # 1. Checkout & Prep Source
      # ========================
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: dharani-dp-33/realme_X7max_GTneo_GTneo2T-AndroidT-kernel-source
          ref: master
          path: kernel

      # ========================
      # 2. Nuclear Removal of OPLUS
      # ========================
      - name: Delete OPLUS Components
        run: |
          cd kernel
          # Remove problematic directories
          rm -rf arch/arm64/kernel/rootguard
          rm -rf kernel/locking/klockopt
          rm -rf drivers/soc/oplus

          # Delete all OPLUS-related Makefiles/Kconfigs
          find . -type f \( -name "*OPLUS*" -o -name "*klockopt*" -o -name "*rootguard*" \) -delete

          # Purge from remaining files
          find . -type f \( -name "Kconfig" -o -name "Makefile" -o -name "*.mk" \) \
            -exec sed -i '/OPLUS_/d; /_FEATURE_/d; /rootguard/d; /klockopt/d' {} \;

      # ========================
      # 3. Build Vanilla ARM64 Kernel
      # ========================
      - name: Build Generic Kernel
        run: |
          cd kernel
          export ARCH=arm64
          
          # Create minimal config
          echo "CONFIG_ARM64=y" > arch/arm64/configs/generic_defconfig
          echo "CONFIG_SMP=y" >> arch/arm64/configs/generic_defconfig
          echo "CONFIG_BLOCK=y" >> arch/arm64/configs/generic_defconfig

          # Build with isolated output
          make O=build clean && make O=build mrproper
          make O=build generic_defconfig
          make O=build -j$(nproc) 2>&1 | tee build.log

      # ========================
      # 4. Validate & Upload
      # ========================
      - name: Verify Artifacts
        run: |
          [ -f "kernel/build/arch/arm64/boot/Image" ] || exit 1

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: kernel/build/arch/arm64/boot/Image*
